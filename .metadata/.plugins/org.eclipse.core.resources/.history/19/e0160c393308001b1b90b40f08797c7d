<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Insert title here</title>
	<script type="text/javascript">
		/*
		  ● Javascript(언어 >> Web:코드해석(웹브라우저:해석기(엔진)) >> 라인단위(순서))
		    ex) url 주소:naver.com/js/common.js
		      > 실행
		      > 네이버가 가지고 있는 common.js를 local PC에서 다운로드
		      > 웹 브라우저가 해석(실행)
		  ● Javascript(객체지향언어:class개념) > 상속, 다형성, 재사용성)

		  ● Javascript 사용
		     1.html의 content, attribute 변경, 삭제, 추가 가능(동적으로)
		     2.css 속성 변경, 삭제, 추가(동적으로)
		     3.유효성 검증(id 체크, 주민번호 검증)
		     4.동적인 웹페이지(화면 구성)
		     5.전 세계적으로 1위(많은 사람들이 사용하면서 제안을 하게 됨)
		       :코드량 줄이고, 많이 쓰는 것 모음 >> lib or framework
		       >> jquery.js 탄생(javascript로 만든 framework)
		       >> angular.js(MVC) / vue.js / react.js...
		       
		       **js 파일은 웹 브라우저가 있어야 동작? local에서 싱핼되게 하면 안되나?(그래서 구글에서 따로 만듬)**
		       >> javascript를 local에서 실행 >> 브라우저 실행 엔진 >> local(v8엔진)
		       >> 이를 통해 Javascript를 Java처럼 back단의 언어로 사용가능하게 함!
		       >> **node.js(DB연동 가능) / npm(node package module) 학습** >> 기업환경에서 보조적인 역할로 활용
			 
		     6.문법
		       1)대소문자 엄격하게 구분
		       2)종결자 ;
		       3)type(var, const, let): 값이 설정되면 타입이 결정
		       4)연산자, 제어문(Java 문법)
		       5)객체
		       
		     7.사용법(css 동일:common.css) >> common.js
		       1)in-line(태그 안쪽에 <p onclick="<script>구문작성...">)
		       2)internal(page 안에서 <head><script>...</head> or <body><script>...</body>)
		       3)external(외부파일:common.js >> link 방식) >> 선호    
		*/
		
		function call(){ //java: public void call() {}
			alert('internal');
		}
	</script>
	<style type="text/css"></style>
	<script type="text/javascript" src="script/common.js"></script>
</head>
<body>
	<h3>in-line</h3>
	<input type="button" value="inline" onclick="alert('hello')">
	<hr>
	<h3>internal</h3>
	<input type="button" value="internal" onclick="call()">
	<hr>
	<h3>external</h3>
	<input type="button" value="external" onclick="excall()">
</body>
</html>